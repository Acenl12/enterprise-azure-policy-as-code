variables:
  # This pipeline is used to deploy Policy definitions, Initiative definitions and Assignments into Azure.
  PAC_OUTPUT_FOLDER: ./Output
  PAC_DEFINITIONS_FOLDER: ./Definitions

  # Use the plain text name of each service connection as a reference
  devServiceConnection: "sc-epac-dev"
  tenant1PlanServiceConnection: "sc-epac-plan-tenant1"
  tenant1DeployServiceConnection: "sc-epac-prod-tenant1"
  tenant1RolesServiceConnection: "sc-epac-roles-tenant1"
  tenant2PlanServiceConnection: "sc-epac-plan-tenant2"
  tenant2DeployServiceConnection: "sc-epac-prod-tenant2"
  tenant2RolesServiceConnection: "sc-epac-roles-tenant2"
  tenant3PlanServiceConnection: "sc-epac-plan-tenant3"
  tenant3DeployServiceConnection: "sc-epac-prod-tenant3"
  tenant3RolesServiceConnection: "sc-epac-roles-tenant3"

  # System.Debug: true

# what to build trigger
trigger:
  branches:
    include:
      - /*
  paths:
    include:
      - *

pr: none

# pool: Linux_pool
# empty = Azure pool

stages:
  - stage: devStage
    displayName: "DEV Plan, Deploy Policies, Roles"
    condition: and(in(variables['Build.Reason'], 'Manual', 'IndividualCI', 'BatchedCI'), not(contains(variables['Build.SourceBranch'], 'refs/heads/main')))
    variables:
      pacEnvironmentSelector: epac-dev
    jobs:
      - deployment: allJob
        environment: PAC-DEV
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: AzurePowerShell@5
                  name: planStep
                  displayName: Plan
                  inputs:
                    azureSubscription: $(devServiceConnection)
                    pwsh: true
                    azurePowerShellVersion: LatestVersion
                    ScriptPath: "Scripts/Deploy/Build-DeploymentPlans.ps1"
                    ScriptArguments:
                      -pacEnvironmentSelector $(pacEnvironmentSelector) `
                      -devOpsType "ado" `
                      -InformationAction Continue
                # Publish pipeline Artifact for ADO Service
                - publish: "$(PAC_OUTPUT_FOLDER)/plans-$(pacEnvironmentSelector)"
                  artifact: "plans-$(pacEnvironmentSelector)"
                  condition: and(succeeded(), or(eq(variables['planStep.deployPolicyChanges'], 'yes'), eq(variables['planStep.deployRoleChanges'], 'yes')))
                # Publish build artifact for ADO Server
                # - task: PublishBuildArtifacts@1
                #   inputs:
                #     pathToPublish: "$(PAC_OUTPUT_FOLDER)/plans-$(pacEnvironmentSelector)"
                #     artifactName: "plans-$(pacEnvironmentSelector)"
                #   condition: and(succeeded(), or(eq(variables['planStep.deployPolicyChanges'], 'yes'), eq(variables['planStep.deployRoleChanges'], 'yes')))
                # End Publish
                - task: AzurePowerShell@5
                  displayName: Deploy PAC-DEV Policy
                  condition: and(succeeded(), eq(variables['planStep.deployPolicyChanges'], 'yes'))
                  inputs:
                    azureSubscription: $(devServiceConnection)
                    pwsh: true
                    azurePowerShellVersion: LatestVersion
                    ScriptPath: "Scripts/Deploy/Deploy-PolicyPlan.ps1"
                    ScriptArguments:
                      -pacEnvironmentSelector $(pacEnvironmentSelector) `
                      -InformationAction Continue
                - task: AzurePowerShell@5
                  displayName: Deploy PAC-DEV Role Assignments
                  condition: and(not(failed()), not(canceled()), eq(variables['planStep.deployRoleChanges'], 'yes'))
                  inputs:
                    azureSubscription: $(devServiceConnection)
                    pwsh: true
                    azurePowerShellVersion: LatestVersion
                    ScriptPath: "Scripts/Deploy/Deploy-RolesPlan.ps1"
                    ScriptArguments:
                      -pacEnvironmentSelector $(pacEnvironmentSelector) `
                      -InformationAction Continue
  - stage: tenantPlanFeatureStage-1
    displayName: "Tenant 1 Plan - Feature Branch"
    dependsOn:
      - devStage
    condition: and(not(failed()), not(canceled()), in(variables['Build.Reason'], 'Manual', 'IndividualCI', 'BatchedCI'), not(contains(variables['Build.SourceBranch'], 'refs/heads/main')))
    variables:
      pacEnvironmentSelector: tenant1
    jobs:
      - job: planJob
        steps:
          - checkout: self
          - task: AzurePowerShell@5
            name: planStep
            displayName: Plan
            inputs:
              azureSubscription: $(tenant1PlanServiceConnection)
              pwsh: true
              azurePowerShellVersion: LatestVersion
              ScriptPath: "Scripts/Deploy/Build-DeploymentPlans.ps1"
              ScriptArguments:
                -pacEnvironmentSelector $(pacEnvironmentSelector) `
                -devOpsType "ado" `
                -InformationAction Continue
          # Publish pipeline Artifact for ADO Service
          - publish: "$(PAC_OUTPUT_FOLDER)/plans-$(pacEnvironmentSelector)"
            artifact: "plans-feature-branch-$(pacEnvironmentSelector)"
            condition: and(succeeded(), or(eq(variables['planStep.deployPolicyChanges'], 'yes'), eq(variables['planStep.deployRoleChanges'], 'yes')))
            # Publish build artifact for ADO Server
            # - task: PublishBuildArtifacts@1
            #   inputs:
            #     pathToPublish: "$(PAC_OUTPUT_FOLDER)/plans-$(pacEnvironmentSelector)"
            #     artifactName: "plans-feature-branch-$(pacEnvironmentSelector)"
            #     condition: and(succeeded(), or(eq(variables['planStep.deployPolicyChanges'], 'yes'), eq(variables['planStep.deployRoleChanges'], 'yes')))
          # End Publish
  - stage: tenantPlanFeatureStage-2
    displayName: "Tenant 2 Plan - Feature Branch"
    dependsOn:
      - devStage
    condition: and(not(failed()), not(canceled()), in(variables['Build.Reason'], 'Manual', 'IndividualCI', 'BatchedCI'), not(contains(variables['Build.SourceBranch'], 'refs/heads/main')))
    variables:
      pacEnvironmentSelector: tenant2
    jobs:
      - job: planJob
        steps:
          - checkout: self
          - task: AzurePowerShell@5
            name: planStep
            displayName: Plan
            inputs:
              azureSubscription: $(tenantPlanServiceConnection)
              pwsh: true
              azurePowerShellVersion: LatestVersion
              ScriptPath: "Scripts/Deploy/Build-DeploymentPlans.ps1"
              ScriptArguments:
                -pacEnvironmentSelector $(pacEnvironmentSelector) `
                -devOpsType "ado" `
                -InformationAction Continue
          # Publish pipeline Artifact for ADO Service
          - publish: "$(PAC_OUTPUT_FOLDER)/plans-$(pacEnvironmentSelector)"
            artifact: "plans-feature-branch-$(pacEnvironmentSelector)"
            condition: and(succeeded(), or(eq(variables['planStep.deployPolicyChanges'], 'yes'), eq(variables['planStep.deployRoleChanges'], 'yes')))
            # Publish build artifact for ADO Server
            # - task: PublishBuildArtifacts@1
            #   inputs:
            #     pathToPublish: "$(PAC_OUTPUT_FOLDER)/plans-$(pacEnvironmentSelector)"
            #     artifactName: "plans-feature-branch-$(pacEnvironmentSelector)"
            #   condition: and(succeeded(), or(eq(variables['planStep.deployPolicyChanges'], 'yes'), eq(variables['planStep.deployRoleChanges'], 'yes')))
          # End Publish
  - stage: completedFeature
    displayName: "Completed Plans - Feature Branch"
    dependsOn:
      - tenant1PlanFeatureStage-1
      - tenant2PlanFeatureStage-2
    condition: and(not(failed()), not(canceled()), in(variables['Build.Reason'], 'Manual', 'IndividualCI', 'BatchedCI'), not(contains(variables['Build.SourceBranch'], 'refs/heads/main')))
    jobs:
      - job:
        steps:
          - checkout: self
          - task: PowerShell@2
            inputs:
              targetType: "inline"
              script: |
                Write-Host "Completed Plans - Feature Branch"
  - stage: tenantPlanMainStage-1
    displayName: "Tenant 1 Plan - Main Branch"
    dependsOn:
      - completedFeature
    condition: and(not(failed()), not(canceled()), in(variables['Build.Reason'], 'Manual', 'IndividualCI', 'BatchedCI'), contains(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      pacEnvironmentSelector: tenant1
    jobs:
      - job: planJob
        steps:
          - checkout: self
          - task: AzurePowerShell@5
            name: planStep
            displayName: Plan
            inputs:
              azureSubscription: $(tenantPlanServiceConnection)
              pwsh: true
              azurePowerShellVersion: LatestVersion
              ScriptPath: "Scripts/Deploy/Build-DeploymentPlans.ps1"
              ScriptArguments:
                -pacEnvironmentSelector $(pacEnvironmentSelector) `
                -devOpsType "ado" `
                -InformationAction Continue
          # Publish pipeline Artifact for ADO Service
          - publish: "$(PAC_OUTPUT_FOLDER)/plans-$(pacEnvironmentSelector)"
            artifact: "plans-$(pacEnvironmentSelector)"
            condition: and(succeeded(), or(eq(variables['planStep.deployPolicyChanges'], 'yes'), eq(variables['planStep.deployRoleChanges'], 'yes')))
            # Publish build artifact for ADO Server
            # - task: PublishBuildArtifacts@1
            #   inputs:
            #     pathToPublish: "$(PAC_OUTPUT_FOLDER)/plans-$(pacEnvironmentSelector)"
            #     artifactName: "policy-plan-$(pacEnvironmentSelector)"
            #   condition: and(succeeded(), or(eq(variables['planStep.deployPolicyChanges'], 'yes'), eq(variables['planStep.deployRoleChanges'], 'yes')))
          # End Publish
  - stage: tenantDeployPolicyStage-1
    displayName: "Tenant 1 Deploy Policy"
    dependsOn:
      - tenantPlanMainStage-1
    condition: and(not(failed()), not(canceled()), eq(dependencies.tenantPlanMainStage-1.outputs['planJob.planStep.deployPolicyChanges'], 'yes'), in(variables['Build.Reason'], 'Manual', 'IndividualCI', 'BatchedCI'), contains(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      pacEnvironmentSelector: tenant1
      PAC_INPUT_FOLDER: "$(Pipeline.Workspace)"
    jobs:
      - deployment: deployPolicyJob
        environment: PAC-POLICY
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: AzurePowerShell@5
                  name: deployStep
                  displayName: Deploy Tenant1 Policy
                  inputs:
                    azureSubscription: $(tenantDeployServiceConnection)
                    pwsh: true
                    azurePowerShellVersion: LatestVersion
                    ScriptPath: "Scripts/Deploy/Deploy-PolicyPlan.ps1"
                    ScriptArguments:
                      -pacEnvironmentSelector $(pacEnvironmentSelector) `
                      -InformationAction Continue
  - stage: tenantRolesStage-1
    displayName: "Tenant 1 Deploy Role Assignments"
    dependsOn:
      - tenantDeployPolicyStage-1
    condition: and(not(failed()), not(canceled()), eq(dependencies.tenantPlanMainStage-1.outputs['planJob.planStep.deployRoleChanges'], 'yes'), in(variables['Build.Reason'], 'Manual', 'IndividualCI', 'BatchedCI'), contains(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      pacEnvironmentSelector: tenant1
      PAC_INPUT_FOLDER: "$(Pipeline.Workspace)"
    jobs:
      - deployment: rolesJob
        environment: PAC-ROLES
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: AzurePowerShell@5
                  displayName: Deploy Tenant1 Role Assignments
                  inputs:
                    azureSubscription: $(tenantRolesServiceConnection)
                    pwsh: true
                    azurePowerShellVersion: LatestVersion
                    ScriptPath: "Scripts/Deploy/Deploy-RolesPlan.ps1"
                    ScriptArguments:
                      -pacEnvironmentSelector $(pacEnvironmentSelector) `
                      -InformationAction Continue
                  condition: succeeded()
  - stage: tenantPlanMainStage-2
    displayName: "Tenant 2 Plan - Main Branch"
    dependsOn:
      - completedFeature
    condition: and(not(failed()), not(canceled()), in(variables['Build.Reason'], 'Manual', 'IndividualCI', 'BatchedCI'), contains(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      pacEnvironmentSelector: tenant2
    jobs:
      - job: planJob
        steps:
          - checkout: self
          - task: AzurePowerShell@5
            name: planStep
            displayName: Plan
            inputs:
              azureSubscription: $(tenantPlanServiceConnection)
              pwsh: true
              azurePowerShellVersion: LatestVersion
              ScriptPath: "Scripts/Deploy/Build-DeploymentPlans.ps1"
              ScriptArguments:
                -pacEnvironmentSelector $(pacEnvironmentSelector) `
                -devOpsType "ado" `
                -InformationAction Continue
          # Publish pipeline Artifact for ADO Service
          - publish: "$(PAC_OUTPUT_FOLDER)/plans-$(pacEnvironmentSelector)"
            artifact: "plans-$(pacEnvironmentSelector)"
            condition: and(succeeded(), or(eq(variables['planStep.deployPolicyChanges'], 'yes'), eq(variables['planStep.deployRoleChanges'], 'yes')))
            # Publish build artifact for ADO Server
            # - task: PublishBuildArtifacts@1
            #   inputs:
            #     pathToPublish: "$(PAC_OUTPUT_FOLDER)/plans-$(pacEnvironmentSelector)"
            #     artifactName: "policy-plan-$(pacEnvironmentSelector)"
            #   condition: and(succeeded(), or(eq(variables['planStep.deployPolicyChanges'], 'yes'), eq(variables['planStep.deployRoleChanges'], 'yes')))
          # End Publish
  - stage: tenantDeployPolicyStage-2
    displayName: "Tenant 2 Deploy Policy"
    dependsOn:
      - tenantPlanMainStage-2
    condition: and(not(failed()), not(canceled()), eq(dependencies.tenantPlanMainStage-2.outputs['planJob.planStep.deployPolicyChanges'], 'yes'), in(variables['Build.Reason'], 'Manual', 'IndividualCI', 'BatchedCI'), contains(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      pacEnvironmentSelector: tenant2
      PAC_INPUT_FOLDER: "$(Pipeline.Workspace)"
    jobs:
      - deployment: deployPolicyJob
        environment: PAC-POLICY
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: AzurePowerShell@5
                  name: deployStep
                  displayName: Deploy Tenant1 Policy
                  inputs:
                    azureSubscription: $(tenantDeployServiceConnection)
                    pwsh: true
                    azurePowerShellVersion: LatestVersion
                    ScriptPath: "Scripts/Deploy/Deploy-PolicyPlan.ps1"
                    ScriptArguments:
                      -pacEnvironmentSelector $(pacEnvironmentSelector) `
                      -InformationAction Continue
  - stage: tenantRolesStage-2
    displayName: "Tenant Deploy Role Assignments"
    dependsOn:
      - tenantDeployPolicyStage-2
    condition: and(not(failed()), not(canceled()), eq(dependencies.tenantPlanMainStage-2.outputs['planJob.planStep.deployRoleChanges'], 'yes'), in(variables['Build.Reason'], 'Manual', 'IndividualCI', 'BatchedCI'), contains(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      pacEnvironmentSelector: tenant2
      PAC_INPUT_FOLDER: "$(Pipeline.Workspace)"
    jobs:
      - deployment: rolesJob
        environment: PAC-ROLES
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: AzurePowerShell@5
                  displayName: Deploy Tenant1 Role Assignments
                  inputs:
                    azureSubscription: $(tenantRolesServiceConnection)
                    pwsh: true
                    azurePowerShellVersion: LatestVersion
                    ScriptPath: "Scripts/Deploy/Deploy-RolesPlan.ps1"
                    ScriptArguments:
                      -pacEnvironmentSelector $(pacEnvironmentSelector) `
                      -InformationAction Continue
                  condition: succeeded()
